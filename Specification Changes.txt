Change 1:
We took the struct ConfigurationParams defined in SocialClusteringService.hpp out of the file and put it into its own file. Moreover we added a managing utiltiy for it which is a proxy for the structure. Additionally we added the ability to load a configuration from a file.

Change 2: 
We changed the folder structure of the project from having multiple subfolders in a src directory to a more stream lined and common model. We have now a folder include, which includes all the header files. All source files are added to the folder src and we will build the project always in the folder build, which only exist on our dev machines and will not be committed.

Change 3:
We changed the AbstractGraph class to be a non-template class and added a separate Vertex class because this greatly simplifies the implementation of this and other related classes. Most of the provided header stubs were not compatible with the AbstractGraph<V> class and had to be  modified, thus we opted for modifying the graph class instead.

Change 4:
Renamed the "Encoder" classes to "Encoding" classes as it makes sense for them to be internally hoding a solution encoding and performing utility operations on it instead of just the latter. In fact, the design by group two seems to have this exact idea in mind, however no private/protected containers were specified.

Change 5:
Removed file compiler_defs.hpp as define macros for C++ class setup like no copy constructor etc. is unnecessary. Additionally the constructors created by the macros are not part of the documentation in the end. Therefore we removed this file and replace the macros with the correct code.

Change 6:
Simplified the convoluted namespace to a simpler model. In our model now we have the following namespaces:
The main namespace clusterer, which is the main namespace for the project.
Then we have three sub namespaces and three aliases to the clusterer::subnamespace :
1) common - all modules and classes with common functionality - alias namespace: clc
2) backend - all modules and classes with backend functionality - alias namespace: clb
3) frontend - all modules and classes with frontend functionality - alias namespace: clf

Change 7:
Replaced the simple and incomplete logger by a better and nicer engineered one. Firstly this new logger replaces the multiple log function with a single veradiac one. Also logging is now on a seperate thread and thread safe. This is really useful as logging to a file for example might be quite costly. Lastly the design is policy based and so we can exchange and extend the logger easily. To keep with the old design we nevertheless provide a singleton threadsafe access to out logger class so we combine the best of both worlds.

Change 8:
Added test_files folder to simulate reading the data from files and store it into a graph. Also mainGraph.cpp should show how Graph and GraphReader can be used.
